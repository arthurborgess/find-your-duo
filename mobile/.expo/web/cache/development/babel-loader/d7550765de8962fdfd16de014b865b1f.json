{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useRef, useEffect } from 'react';\nimport { Background } from \"./src/components/Background\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { useFonts, Inter_400Regular, Inter_600SemiBold, Inter_700Bold, Inter_900Black } from '@expo-google-fonts/inter';\nimport * as Notifications from 'expo-notifications';\nimport { Loading } from \"./src/components/Loading\";\nimport { Routes } from \"./src/routes\";\nimport \"./src/services/notificationConfigs\";\nimport { getPushNotificationToken } from \"./src/services/getPushNotificationToken\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useFonts = useFonts({\n    Inter_400Regular: Inter_400Regular,\n    Inter_600SemiBold: Inter_600SemiBold,\n    Inter_700Bold: Inter_700Bold,\n    Inter_900Black: Inter_900Black\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  var getNotificationListener = useRef();\n  var reponseNotificationListener = useRef();\n  useEffect(function () {\n    getPushNotificationToken();\n  }, []);\n  useEffect(function () {\n    getNotificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n      console.log(notification);\n    });\n    reponseNotificationListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n      console.log(response);\n    });\n    return function () {\n      if (getNotificationListener.current && reponseNotificationListener.current) {\n        Notifications.removeNotificationSubscription(getNotificationListener.current);\n        Notifications.removeNotificationSubscription(reponseNotificationListener.current);\n      }\n    };\n  }, []);\n  return _jsxs(Background, {\n    children: [_jsx(StatusBar, {\n      barStyle: \"light-content\",\n      backgroundColor: \"transparent\",\n      translucent: true\n    }), fontsLoaded ? _jsx(Routes, {}) : _jsx(Loading, {})]\n  });\n}","map":{"version":3,"names":["useRef","useEffect","Background","useFonts","Inter_400Regular","Inter_600SemiBold","Inter_700Bold","Inter_900Black","Notifications","Loading","Routes","getPushNotificationToken","App","fontsLoaded","getNotificationListener","reponseNotificationListener","current","addNotificationReceivedListener","notification","console","log","addNotificationResponseReceivedListener","response","removeNotificationSubscription"],"sources":["/home/arthur/Documents/nlw/mobile/App.tsx"],"sourcesContent":["import { useRef, useEffect } from 'react';\nimport { Background } from './src/components/Background';\nimport { StatusBar } from 'react-native';\nimport {\n  useFonts,\n  Inter_400Regular,\n  Inter_600SemiBold,\n  Inter_700Bold,\n  Inter_900Black\n} from '@expo-google-fonts/inter';\nimport * as Notifications from 'expo-notifications';\nimport { Subscription } from 'expo-modules-core';\nimport { Loading } from './src/components/Loading';\nimport { Routes } from './src/routes';\nimport './src/services/notificationConfigs';\nimport { getPushNotificationToken } from './src/services/getPushNotificationToken';\n\n\nexport default function App() {\n  const [fontsLoaded] = useFonts({\n    Inter_400Regular,\n    Inter_600SemiBold,\n    Inter_700Bold,\n    Inter_900Black\n  });\n  const getNotificationListener = useRef<Subscription>();\n  const reponseNotificationListener = useRef<Subscription>();\n\n  useEffect(() => {\n    getPushNotificationToken();\n  }, []);\n\n  useEffect(() => {\n    getNotificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n      console.log(notification);\n    });\n\n    reponseNotificationListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n      console.log(response);\n    });\n\n    return () => {\n      if (getNotificationListener.current && reponseNotificationListener.current) {\n        Notifications.removeNotificationSubscription(getNotificationListener.current);\n        Notifications.removeNotificationSubscription(reponseNotificationListener.current);\n      }\n    }\n  }, []);\n\n\n  return (\n    <Background>\n      <StatusBar\n        barStyle=\"light-content\"\n        backgroundColor=\"transparent\"\n        translucent\n      />\n      {fontsLoaded ? <Routes /> : <Loading />}\n    </Background>\n  );\n}\n"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AACA,SAASC,UAAT;;AAEA,SACEC,QADF,EAEEC,gBAFF,EAGEC,iBAHF,EAIEC,aAJF,EAKEC,cALF,QAMO,0BANP;AAOA,OAAO,KAAKC,aAAZ,MAA+B,oBAA/B;AAEA,SAASC,OAAT;AACA,SAASC,MAAT;AACA;AACA,SAASC,wBAAT;;;AAGA,eAAe,SAASC,GAAT,GAAe;EAC5B,gBAAsBT,QAAQ,CAAC;IAC7BC,gBAAgB,EAAhBA,gBAD6B;IAE7BC,iBAAiB,EAAjBA,iBAF6B;IAG7BC,aAAa,EAAbA,aAH6B;IAI7BC,cAAc,EAAdA;EAJ6B,CAAD,CAA9B;EAAA;EAAA,IAAOM,WAAP;;EAMA,IAAMC,uBAAuB,GAAGd,MAAM,EAAtC;EACA,IAAMe,2BAA2B,GAAGf,MAAM,EAA1C;EAEAC,SAAS,CAAC,YAAM;IACdU,wBAAwB;EACzB,CAFQ,EAEN,EAFM,CAAT;EAIAV,SAAS,CAAC,YAAM;IACda,uBAAuB,CAACE,OAAxB,GAAkCR,aAAa,CAACS,+BAAd,CAA8C,UAAAC,YAAY,EAAI;MAC9FC,OAAO,CAACC,GAAR,CAAYF,YAAZ;IACD,CAFiC,CAAlC;IAIAH,2BAA2B,CAACC,OAA5B,GAAsCR,aAAa,CAACa,uCAAd,CAAsD,UAAAC,QAAQ,EAAI;MACtGH,OAAO,CAACC,GAAR,CAAYE,QAAZ;IACD,CAFqC,CAAtC;IAIA,OAAO,YAAM;MACX,IAAIR,uBAAuB,CAACE,OAAxB,IAAmCD,2BAA2B,CAACC,OAAnE,EAA4E;QAC1ER,aAAa,CAACe,8BAAd,CAA6CT,uBAAuB,CAACE,OAArE;QACAR,aAAa,CAACe,8BAAd,CAA6CR,2BAA2B,CAACC,OAAzE;MACD;IACF,CALD;EAMD,CAfQ,EAeN,EAfM,CAAT;EAkBA,OACE,MAAC,UAAD;IAAA,WACE,KAAC,SAAD;MACE,QAAQ,EAAC,eADX;MAEE,eAAe,EAAC,aAFlB;MAGE,WAAW;IAHb,EADF,EAMGH,WAAW,GAAG,KAAC,MAAD,KAAH,GAAgB,KAAC,OAAD,KAN9B;EAAA,EADF;AAUD"},"metadata":{},"sourceType":"module"}