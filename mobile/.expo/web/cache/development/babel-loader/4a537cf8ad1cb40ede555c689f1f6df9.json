{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { StringFormat } from \"../Clipboard.types\";\nimport { ClipboardUnavailableException, CopyFailureException, NoPermissionException, PasteFailureException } from \"./Exceptions\";\nimport { base64toBlob, blobToBase64Async, findHtmlInClipboardAsync, findImageInClipboardAsync, getImageSizeFromBlobAsync, htmlToPlainText, isClipboardPermissionDeniedAsync } from \"./Utils\";\nexport default {\n  get name() {\n    return 'ExpoClipboard';\n  },\n\n  getStringAsync: function () {\n    var _getStringAsync = _asyncToGenerator(function* (options) {\n      if (!navigator.clipboard) {\n        throw new ClipboardUnavailableException();\n      }\n\n      try {\n        switch (options.preferredFormat) {\n          case StringFormat.HTML:\n            {\n              var clipboardItems = yield navigator.clipboard.read();\n              var blob = yield findHtmlInClipboardAsync(clipboardItems);\n\n              if (!blob) {\n                return yield navigator.clipboard.readText();\n              }\n\n              return yield new Response(blob).text();\n            }\n\n          default:\n            {\n              var text = yield navigator.clipboard.readText();\n\n              if (!text || text === '') {\n                var _clipboardItems = yield navigator.clipboard.read();\n\n                var _blob = yield findHtmlInClipboardAsync(_clipboardItems);\n\n                var blobText = yield _blob == null ? void 0 : _blob.text();\n                text = htmlToPlainText(blobText != null ? blobText : '');\n              }\n\n              return text;\n            }\n        }\n      } catch (e) {\n        if (e.name === 'NotAllowedError' || (yield isClipboardPermissionDeniedAsync())) {\n          throw new NoPermissionException();\n        }\n\n        try {\n          return window.clipboardData.getData('Text');\n        } catch (_unused) {\n          return Promise.reject(new Error('Unable to retrieve item from clipboard'));\n        }\n      }\n    });\n\n    function getStringAsync(_x) {\n      return _getStringAsync.apply(this, arguments);\n    }\n\n    return getStringAsync;\n  }(),\n  setString: function setString(text) {\n    var textField = document.createElement('textarea');\n    textField.textContent = text;\n    document.body.appendChild(textField);\n    textField.select();\n\n    try {\n      document.execCommand('copy');\n      return true;\n    } catch (_unused2) {\n      return false;\n    } finally {\n      document.body.removeChild(textField);\n    }\n  },\n  setStringAsync: function () {\n    var _setStringAsync = _asyncToGenerator(function* (text, options) {\n      switch (options.inputFormat) {\n        case StringFormat.HTML:\n          {\n            if (!navigator.clipboard) {\n              throw new ClipboardUnavailableException();\n            }\n\n            try {\n              var clipboardItemInput = createHtmlClipboardItem(text);\n              yield navigator.clipboard.write([clipboardItemInput]);\n              return true;\n            } catch (e) {\n              if (e.name === 'NotAllowedError' || (yield isClipboardPermissionDeniedAsync())) {\n                throw new NoPermissionException();\n              }\n\n              throw new CopyFailureException(e.message);\n            }\n          }\n\n        default:\n          {\n            try {\n              if (!navigator.clipboard) {\n                throw new Error();\n              }\n\n              yield navigator.clipboard.writeText(text);\n              return true;\n            } catch (_unused3) {\n              return this.setString(text);\n            }\n          }\n      }\n    });\n\n    function setStringAsync(_x2, _x3) {\n      return _setStringAsync.apply(this, arguments);\n    }\n\n    return setStringAsync;\n  }(),\n  hasStringAsync: function () {\n    var _hasStringAsync = _asyncToGenerator(function* () {\n      return yield clipboardHasTypesAsync(['text/plain', 'text/html']);\n    });\n\n    function hasStringAsync() {\n      return _hasStringAsync.apply(this, arguments);\n    }\n\n    return hasStringAsync;\n  }(),\n  getImageAsync: function () {\n    var _getImageAsync = _asyncToGenerator(function* (_options) {\n      if (!navigator.clipboard) {\n        throw new ClipboardUnavailableException();\n      }\n\n      try {\n        var clipboardItems = yield navigator.clipboard.read();\n        var blob = yield findImageInClipboardAsync(clipboardItems);\n\n        if (!blob) {\n          return null;\n        }\n\n        var _yield$Promise$all = yield Promise.all([blobToBase64Async(blob), getImageSizeFromBlobAsync(blob)]),\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2),\n            data = _yield$Promise$all2[0],\n            size = _yield$Promise$all2[1];\n\n        return {\n          data: data,\n          size: size\n        };\n      } catch (e) {\n        if (e.name === 'NotAllowedError' || (yield isClipboardPermissionDeniedAsync())) {\n          throw new NoPermissionException();\n        }\n\n        throw new PasteFailureException(e.message);\n      }\n    });\n\n    function getImageAsync(_x4) {\n      return _getImageAsync.apply(this, arguments);\n    }\n\n    return getImageAsync;\n  }(),\n  setImageAsync: function () {\n    var _setImageAsync = _asyncToGenerator(function* (base64image) {\n      if (!navigator.clipboard) {\n        throw new ClipboardUnavailableException();\n      }\n\n      try {\n        var blob = base64toBlob(base64image, 'image/png');\n        yield navigator.clipboard.write([new ClipboardItem(_defineProperty({}, blob.type, blob))]);\n      } catch (err) {\n        throw new CopyFailureException(err.message);\n      }\n    });\n\n    function setImageAsync(_x5) {\n      return _setImageAsync.apply(this, arguments);\n    }\n\n    return setImageAsync;\n  }(),\n  hasImageAsync: function () {\n    var _hasImageAsync = _asyncToGenerator(function* () {\n      return yield clipboardHasTypesAsync(['image/png', 'image/jpeg']);\n    });\n\n    function hasImageAsync() {\n      return _hasImageAsync.apply(this, arguments);\n    }\n\n    return hasImageAsync;\n  }(),\n  addClipboardListener: function addClipboardListener() {},\n  removeClipboardListener: function removeClipboardListener() {}\n};\n\nfunction clipboardHasTypesAsync(_x6) {\n  return _clipboardHasTypesAsync.apply(this, arguments);\n}\n\nfunction _clipboardHasTypesAsync() {\n  _clipboardHasTypesAsync = _asyncToGenerator(function* (types) {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      var clipboardItems = yield navigator.clipboard.read();\n      return clipboardItems.flatMap(function (item) {\n        return item.types;\n      }).some(function (type) {\n        return types.includes(type);\n      });\n    } catch (e) {\n      if (e.name === 'NotAllowedError' || (yield isClipboardPermissionDeniedAsync())) {\n        throw new NoPermissionException();\n      }\n\n      throw e;\n    }\n  });\n  return _clipboardHasTypesAsync.apply(this, arguments);\n}\n\nfunction createHtmlClipboardItem(htmlString) {\n  return new ClipboardItem({\n    'text/html': new Blob([htmlString], {\n      type: 'text/html'\n    }),\n    'text/plain': new Blob([htmlToPlainText(htmlString)], {\n      type: 'text/plain'\n    })\n  });\n}","map":{"version":3,"mappings":"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","names":["StringFormat","ClipboardUnavailableException","CopyFailureException","NoPermissionException","PasteFailureException","base64toBlob","blobToBase64Async","findHtmlInClipboardAsync","findImageInClipboardAsync","getImageSizeFromBlobAsync","htmlToPlainText","isClipboardPermissionDeniedAsync","name","getStringAsync","options","navigator","clipboard","preferredFormat","HTML","clipboardItems","read","blob","readText","Response","text","blobText","e","window","clipboardData","getData","Promise","reject","Error","setString","textField","document","createElement","textContent","body","appendChild","select","execCommand","removeChild","setStringAsync","inputFormat","clipboardItemInput","createHtmlClipboardItem","write","message","writeText","hasStringAsync","clipboardHasTypesAsync","getImageAsync","_options","all","data","size","setImageAsync","base64image","ClipboardItem","type","err","hasImageAsync","addClipboardListener","removeClipboardListener","types","flatMap","item","some","includes","htmlString","Blob"],"sourceRoot":"","sources":["../../src/web/ClipboardModule.ts"],"sourcesContent":["import {\n  ClipboardImage,\n  GetImageOptions,\n  GetStringOptions,\n  SetStringOptions,\n  StringFormat,\n} from '../Clipboard.types';\nimport {\n  ClipboardUnavailableException,\n  CopyFailureException,\n  NoPermissionException,\n  PasteFailureException,\n} from './Exceptions';\nimport {\n  base64toBlob,\n  blobToBase64Async,\n  findHtmlInClipboardAsync,\n  findImageInClipboardAsync,\n  getImageSizeFromBlobAsync,\n  htmlToPlainText,\n  isClipboardPermissionDeniedAsync,\n} from './Utils';\n\nexport default {\n  get name(): string {\n    return 'ExpoClipboard';\n  },\n  async getStringAsync(options: GetStringOptions): Promise<string> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      switch (options.preferredFormat) {\n        case StringFormat.HTML: {\n          // Try reading HTML first\n          const clipboardItems = await navigator.clipboard.read();\n          const blob = await findHtmlInClipboardAsync(clipboardItems);\n          if (!blob) {\n            // Fall back to plain text\n            return await navigator.clipboard.readText();\n          }\n          return await new Response(blob).text();\n        }\n        default: {\n          let text = await navigator.clipboard.readText();\n          if (!text || text === '') {\n            // If there's no direct plain text, try reading HTML\n            const clipboardItems = await navigator.clipboard.read();\n            const blob = await findHtmlInClipboardAsync(clipboardItems);\n            const blobText = await blob?.text();\n            text = htmlToPlainText(blobText ?? '');\n          }\n          return text;\n        }\n      }\n    } catch (e) {\n      // it might fail, because user denied permission\n      if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n        throw new NoPermissionException();\n      }\n\n      try {\n        // Internet Explorer\n        // @ts-ignore\n        return window.clipboardData.getData('Text');\n      } catch {\n        return Promise.reject(new Error('Unable to retrieve item from clipboard'));\n      }\n    }\n  },\n  // TODO: (barthap) The `setString` was deprecated in SDK 45. Remove this function in a few SDK cycles.\n  setString(text: string): boolean {\n    const textField = document.createElement('textarea');\n    textField.textContent = text;\n    document.body.appendChild(textField);\n    textField.select();\n    try {\n      document.execCommand('copy');\n      return true;\n    } catch {\n      return false;\n    } finally {\n      document.body.removeChild(textField);\n    }\n  },\n  async setStringAsync(text: string, options: SetStringOptions): Promise<boolean> {\n    switch (options.inputFormat) {\n      case StringFormat.HTML: {\n        if (!navigator.clipboard) {\n          throw new ClipboardUnavailableException();\n        }\n\n        try {\n          const clipboardItemInput = createHtmlClipboardItem(text);\n          await navigator.clipboard.write([clipboardItemInput]);\n          return true;\n        } catch (e) {\n          // it might fail, because user denied permission\n          if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n            throw new NoPermissionException();\n          }\n          throw new CopyFailureException(e.message);\n        }\n      }\n      default: {\n        try {\n          if (!navigator.clipboard) {\n            throw new Error();\n          }\n          await navigator.clipboard.writeText(text);\n          return true;\n        } catch {\n          // we can fall back to legacy behavior in any kind of failure\n          // including navigator.clipboard unavailability\n          return this.setString(text);\n        }\n      }\n    }\n  },\n  async hasStringAsync(): Promise<boolean> {\n    return await clipboardHasTypesAsync(['text/plain', 'text/html']);\n  },\n  async getImageAsync(_options: GetImageOptions): Promise<ClipboardImage | null> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      const clipboardItems = await navigator.clipboard.read();\n      const blob = await findImageInClipboardAsync(clipboardItems);\n      if (!blob) {\n        return null;\n      }\n\n      const [data, size] = await Promise.all([\n        blobToBase64Async(blob),\n        getImageSizeFromBlobAsync(blob),\n      ]);\n\n      return { data, size };\n    } catch (e) {\n      // it might fail, because user denied permission\n      if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n        throw new NoPermissionException();\n      }\n      throw new PasteFailureException(e.message);\n    }\n  },\n  async setImageAsync(base64image: string): Promise<void> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      // we set it always to `image/png` because it's the only format supported by the clipboard\n      // but it seems to work even when provided jpeg data\n      const blob = base64toBlob(base64image, 'image/png');\n      await navigator.clipboard.write([\n        // I cannot use `@ts-expect-error` here because some environments consider this correct:\n        // expo-module build - OK,\n        // et gdad - error\n        // Fixed in TS >4.4.3: https://github.com/microsoft/TypeScript/issues/46116#issuecomment-932443415\n        // @ts-ignore Some tools seem to use TS <= 4.4.3\n        new ClipboardItem({\n          [blob.type]: blob,\n        } as Record<string, ClipboardItemDataType>),\n      ]);\n    } catch (err: any) {\n      throw new CopyFailureException(err.message);\n    }\n  },\n  async hasImageAsync(): Promise<boolean> {\n    return await clipboardHasTypesAsync(['image/png', 'image/jpeg']);\n  },\n  addClipboardListener(): void {},\n  removeClipboardListener(): void {},\n};\n\n/**\n * Resolves to true if clipboard has one of provided {@link types}.\n * @throws `ClipboardUnavailableException` if AsyncClipboard API is not available\n * @throws `NoPermissionException` if user denied permission\n */\nasync function clipboardHasTypesAsync(types: string[]): Promise<boolean> {\n  if (!navigator.clipboard) {\n    throw new ClipboardUnavailableException();\n  }\n\n  try {\n    const clipboardItems = await navigator.clipboard.read();\n    return clipboardItems.flatMap((item) => item.types).some((type) => types.includes(type));\n  } catch (e) {\n    // it might fail, because user denied permission\n    if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n      throw new NoPermissionException();\n    }\n    throw e;\n  }\n}\n\nfunction createHtmlClipboardItem(htmlString: string): ClipboardItem {\n  return new ClipboardItem({\n    // @ts-ignore `Blob` from `lib.dom.d.ts` and the one from `@types/react-native` differ\n    'text/html': new Blob([htmlString], { type: 'text/html' }),\n    // @ts-ignore `Blob` from `lib.dom.d.ts` and the one from `@types/react-native` differ\n    'text/plain': new Blob([htmlToPlainText(htmlString)], { type: 'text/plain' }),\n  });\n}\n"]},"metadata":{},"sourceType":"module"}